* Process Future

process-future.el offers a set of simple functions extending Emacs' existing ~make-process~ functionality. It bundles
both a process in a single struct - the "future" - making it conventiently easy to pass around to other functions,
wait for it to complete and access its output. In other words it's basically an asynchronous version of ~shell-command-to-string~.

To create a future use ~pf-create~. It takes as input a list of strings which is the command to run and returns a ~process-future~
struct made up of the two fields ~process~ and ~result~.

To wait for a future to complete use ~pf-await~. It takes as input the future to wait for as well as the keyword args
~:timeout~ (in ms) and ~:just-this-one~ (see ~accept-process-output~) and returns the process output, or nil if the process
did not finish within the given timeout. The output (or nil) will also be assgined to the future's ~result~ field.

For example given this slow_status.sh bash script

#+BEGIN_SRC bash
  sleep 3 && git status
#+END_SRC

the following code will execute within 3 seconds, despite running the script twice:

#+BEGIN_SRC emacs-lisp
  (let ((future1 (pf-create "bash" "slow_status.sh"))
        (future2 (pf-create "bash" "slow_status.sh")))
    (pf-await future1 :timeout 4000 :just-this-one nil)
    (pf-await future2 :timeout 4000 :just-this-one nil))
#+END_SRC
